package com.github.lunatrius.schematica.handler.client;

import com.github.lunatrius.schematica.client.world.SchematicWorld;
import com.github.lunatrius.schematica.proxy.ClientProxy;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.Entity;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.Vec3;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent.RenderTickEvent;

public class RenderTickHandler {

    public static final RenderTickHandler INSTANCE = new RenderTickHandler();
    private final Minecraft minecraft = Minecraft.getMinecraft();

    @SubscribeEvent
    public void onRenderTick(RenderTickEvent event) {
        SchematicWorld schematic = ClientProxy.schematic;

        ClientProxy.movingObjectPosition = schematic != null ? this.rayTrace(schematic, 1.0F) : null;
    }

    private MovingObjectPosition rayTrace(SchematicWorld schematic, float partialTicks) {
        Entity renderViewEntity = this.minecraft.getRenderViewEntity();

        if (renderViewEntity == null) {
            return null;
        } else {
            double blockReachDistance = (double) this.minecraft.playerController.getBlockReachDistance();
            double posX = renderViewEntity.posX;
            double posY = renderViewEntity.posY;
            double posZ = renderViewEntity.posZ;

            renderViewEntity.posX -= (double) schematic.position.x;
            renderViewEntity.posY -= (double) schematic.position.y;
            renderViewEntity.posZ -= (double) schematic.position.z;
            Vec3 vecPosition = renderViewEntity.getPositionEyes(partialTicks);
            Vec3 vecLook = renderViewEntity.getLook(partialTicks);
            Vec3 vecExtendedLook = vecPosition.addVector(vecLook.xCoord * blockReachDistance, vecLook.yCoord * blockReachDistance, vecLook.zCoord * blockReachDistance);

            renderViewEntity.posX = posX;
            renderViewEntity.posY = posY;
            renderViewEntity.posZ = posZ;
            return schematic.rayTraceBlocks(vecPosition, vecExtendedLook, false, false, true);
        }
    }
}
