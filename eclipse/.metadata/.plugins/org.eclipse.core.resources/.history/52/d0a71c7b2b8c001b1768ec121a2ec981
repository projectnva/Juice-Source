package com.github.lunatrius.schematica.world.schematic;

import com.github.lunatrius.schematica.api.ISchematic;
import com.github.lunatrius.schematica.api.event.PostSchematicCaptureEvent;
import com.github.lunatrius.schematica.reference.Reference;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.GZIPOutputStream;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.ChatComponentTranslation;
import net.minecraftforge.common.MinecraftForge;

public abstract class SchematicFormat {

    public static final Map FORMATS = new HashMap();
    public static String FORMAT_DEFAULT;

    public abstract ISchematic readFromNBT(NBTTagCompound nbttagcompound);

    public abstract boolean writeToNBT(NBTTagCompound nbttagcompound, ISchematic ischematic);

    public static ISchematic readFromFile(File file) {
        try {
            NBTTagCompound ex = SchematicUtil.readTagCompoundFromFile(file);
            String format = ex.getString("Materials");
            SchematicFormat schematicFormat = (SchematicFormat) SchematicFormat.FORMATS.get(format);

            if (schematicFormat == null) {
                throw new UnsupportedFormatException(format);
            } else {
                return schematicFormat.readFromNBT(ex);
            }
        } catch (Exception exception) {
            Reference.logger.error("Failed to read schematic!", exception);
            return null;
        }
    }

    public static ISchematic readFromFile(File directory, String filename) {
        return readFromFile(new File(directory, filename));
    }

    public static boolean writeToFile(File file, ISchematic schematic) {
        try {
            PostSchematicCaptureEvent ex = new PostSchematicCaptureEvent(schematic);

            MinecraftForge.EVENT_BUS.post(ex);
            NBTTagCompound tagCompound = new NBTTagCompound();

            ((SchematicFormat) SchematicFormat.FORMATS.get(SchematicFormat.FORMAT_DEFAULT)).writeToNBT(tagCompound, schematic);
            DataOutputStream dataOutputStream = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(file)));

            try {
                NBTTagCompound.writeEntry("Schematic", tagCompound, dataOutputStream);
            } finally {
                dataOutputStream.close();
            }

            return true;
        } catch (Exception exception) {
            Reference.logger.error("Failed to write schematic!", exception);
            return false;
        }
    }

    public static boolean writeToFile(File directory, String filename, ISchematic schematic) {
        return writeToFile(new File(directory, filename), schematic);
    }

    public static void writeToFileAndNotify(File file, ISchematic schematic, EntityPlayer player) {
        boolean success = writeToFile(file, schematic);
        String message = success ? "schematica.command.save.saveSucceeded" : "schematica.command.save.saveFailed";

        player.addChatMessage(new ChatComponentTranslation(message, new Object[] { file.getName()}));
    }

    static {
        SchematicFormat.FORMATS.put("Alpha", new SchematicAlpha());
        SchematicFormat.FORMAT_DEFAULT = "Alpha";
    }
}
