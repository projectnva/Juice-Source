package clientname.mods.impl.crosshairmod.utils;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;

public class GuiGraphics {

    private static FontRenderer fontRenderer = Minecraft.getMinecraft().fontRendererObj;

    public static void drawHorizontalLine(int y, int x1, int x2, RGBA colour) {
        drawFilledRectangle(x1, y, x2, y + 1, colour);
    }

    public static void drawVerticalLine(int x, int y1, int y2, RGBA colour) {
        drawFilledRectangle(x, y1, x + 1, y2, colour);
    }

    public static void drawRectangle(int x1, int y1, int x2, int y2, RGBA colour) {
        drawHorizontalLine(y1, x1, x2, colour);
        drawHorizontalLine(y2, x1, x2 + 1, colour);
        drawVerticalLine(x1, y1, y2, colour);
        drawVerticalLine(x2, y1, y2, colour);
    }

    public static void drawFilledRectangle(int x1, int y1, int x2, int y2, RGBA colour) {
        int tessellator;

        if (x1 < x2) {
            tessellator = x1;
            x1 = x2;
            x2 = tessellator;
        }

        if (y1 < y2) {
            tessellator = y1;
            y1 = y2;
            y2 = tessellator;
        }

        Tessellator tessellator1 = Tessellator.getInstance();
        WorldRenderer worldrenderer = tessellator1.getWorldRenderer();

        GlStateManager.enableBlend();
        GlStateManager.disableTexture2D();
        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
        GlStateManager.color((float) colour.getRed() / 255.0F, (float) colour.getGreen() / 255.0F, (float) colour.getBlue() / 255.0F, (float) colour.getOpacity() / 255.0F);
        worldrenderer.begin(7, DefaultVertexFormats.POSITION);
        worldrenderer.pos((double) x1, (double) y2, 0.0D).endVertex();
        worldrenderer.pos((double) x2, (double) y2, 0.0D).endVertex();
        worldrenderer.pos((double) x2, (double) y1, 0.0D).endVertex();
        worldrenderer.pos((double) x1, (double) y1, 0.0D).endVertex();
        tessellator1.draw();
        GlStateManager.enableTexture2D();
        GlStateManager.disableBlend();
    }

    public static void drawTexturedRectangle(int x, int y, int textureX, int textureY, int width, int height) {
        float f = 0.00390625F;
        float f1 = 0.00390625F;
        Tessellator tessellator = Tessellator.getInstance();
        WorldRenderer worldrenderer = tessellator.getWorldRenderer();

        worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
        worldrenderer.pos((double) (x + 0), (double) (y + height), 0.0D).tex((double) ((float) (textureX + 0) * f), (double) ((float) (textureY + height) * f1)).endVertex();
        worldrenderer.pos((double) (x + width), (double) (y + height), 0.0D).tex((double) ((float) (textureX + width) * f), (double) ((float) (textureY + height) * f1)).endVertex();
        worldrenderer.pos((double) (x + width), (double) (y + 0), 0.0D).tex((double) ((float) (textureX + width) * f), (double) ((float) (textureY + 0) * f1)).endVertex();
        worldrenderer.pos((double) (x + 0), (double) (y + 0), 0.0D).tex((double) ((float) (textureX + 0) * f), (double) ((float) (textureY + 0) * f1)).endVertex();
        tessellator.draw();
    }

    public static void drawBorderedRectangle(int x1, int y1, int x2, int y2, RGBA innerColour, RGBA outerColour) {
        drawFilledRectangle(x1, y1, x2, y2, innerColour);
        drawRectangle(x1, y1, x2, y2, outerColour);
    }

    public static void drawThemeBorderedRectangle(int x1, int y1, int x2, int y2) {
        drawBorderedRectangle(x1, y1, x2, y2, GuiTheme.PRIMARY_T, GuiTheme.SECONDARY);
    }

    public static void drawString(String text, int x, int y, int colour) {
        GuiGraphics.fontRenderer.drawString(text, x, y, colour);
    }

    public static void drawStringWithShadow(String text, int x, int y, int colour) {
        GuiGraphics.fontRenderer.drawStringWithShadow(text, (float) x, (float) y, colour);
    }

    public static int getStringWidth(String text) {
        return GuiGraphics.fontRenderer.getStringWidth(text);
    }

    public static int[] getScreenSize() {
        int[] size = new int[2];
        ScaledResolution resolution = new ScaledResolution(Minecraft.getMinecraft(), 0, 0);

        size[0] = resolution.getScaledWidth();
        size[1] = resolution.getScaledHeight();
        return size;
    }

    public static double[] getScreenSizeDouble() {
        double[] size = new double[2];
        ScaledResolution resolution = new ScaledResolution(Minecraft.getMinecraft(), 0, 0);

        size[0] = resolution.getScaledWidth_double();
        size[1] = resolution.getScaledHeight_double();
        return size;
    }

    public static void drawLine(int x1, int y1, int x2, int y2, RGBA colour) {
        Tessellator tessellator = Tessellator.getInstance();
        WorldRenderer worldrenderer = tessellator.getWorldRenderer();

        GlStateManager.enableBlend();
        GlStateManager.disableTexture2D();
        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
        GlStateManager.color((float) colour.getRed() / 255.0F, (float) colour.getGreen() / 255.0F, (float) colour.getBlue() / 255.0F, (float) colour.getOpacity() / 255.0F);
        worldrenderer.begin(3, DefaultVertexFormats.POSITION);
        worldrenderer.pos((double) x1, (double) y1, 0.0D).endVertex();
        worldrenderer.pos((double) x2, (double) y2, 0.0D).endVertex();
        tessellator.draw();
        GlStateManager.enableTexture2D();
        GlStateManager.disableBlend();
    }

    public static void drawCircle(double x, double y, int radius, RGBA colour) {
        Tessellator tessellator = Tessellator.getInstance();
        WorldRenderer worldrenderer = tessellator.getWorldRenderer();

        GlStateManager.enableBlend();
        GlStateManager.disableTexture2D();
        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
        GlStateManager.color((float) colour.getRed() / 255.0F, (float) colour.getGreen() / 255.0F, (float) colour.getBlue() / 255.0F, (float) colour.getOpacity() / 255.0F);
        worldrenderer.begin(3, DefaultVertexFormats.POSITION);

        for (int degrees = 0; degrees <= 360; ++degrees) {
            float radians = (float) ((double) degrees * 0.017453292519943295D);

            worldrenderer.pos(x + Math.cos((double) radians) * (double) radius, y + Math.sin((double) radians) * (double) radius, 0.0D).endVertex();
        }

        tessellator.draw();
        GlStateManager.enableTexture2D();
        GlStateManager.disableBlend();
    }
}
