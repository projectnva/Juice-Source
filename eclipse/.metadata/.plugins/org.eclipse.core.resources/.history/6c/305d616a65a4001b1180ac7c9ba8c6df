package clientname.basicgui.basicgui.utils;

import static org.lwjgl.opengl.GL11.GL_BLEND;
import static org.lwjgl.opengl.GL11.GL_ENABLE_BIT;
import static org.lwjgl.opengl.GL11.GL_LINE_SMOOTH;
import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_TEXTURE_2D;
import static org.lwjgl.opengl.GL11.GL_TRIANGLE_FAN;
import static org.lwjgl.opengl.GL11.glBegin;
import static org.lwjgl.opengl.GL11.glBlendFunc;
import static org.lwjgl.opengl.GL11.glColor4f;
import static org.lwjgl.opengl.GL11.glDisable;
import static org.lwjgl.opengl.GL11.glEnable;
import static org.lwjgl.opengl.GL11.glEnd;
import static org.lwjgl.opengl.GL11.glPopAttrib;
import static org.lwjgl.opengl.GL11.glPushAttrib;
import static org.lwjgl.opengl.GL11.glVertex2f;

import java.awt.Color;
import java.util.List;

import org.lwjgl.opengl.GL11;

import com.github.energizedab.pvptube.Main;
import com.github.energizedab.pvptube.display.HUDElement;
import com.github.energizedab.pvptube.display.HUDElementCategory;
import com.google.common.collect.Lists;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;

public class RenderUtils {

	public static Minecraft mc = Minecraft.getMinecraft();
	
	public static ScaledResolution getScaledResolution() {
		return new ScaledResolution(mc, mc.displayWidth, mc.displayHeight);
	}
	
	public static void drawCircle(float cx, float cy, float r, int num_segments, int c) {
        GL11.glPushMatrix();
        cx *= 2.0F;
        cy *= 2.0F;
        float f = (c >> 24 & 0xFF) / 255.0F;
        float f1 = (c >> 16 & 0xFF) / 255.0F;
        float f2 = (c >> 8 & 0xFF) / 255.0F;
        float f3 = (c & 0xFF) / 255.0F;
        float theta = (float) (6.2831852D / num_segments);
        float p = (float) Math.cos(theta);
        float s = (float) Math.sin(theta);
        float x = r *= 2.0F;
        float y = 0.0F;
        enableGL2D();
        GL11.glScalef(0.5F, 0.5F, 0.5F);
        GL11.glColor4f(f1, f2, f3, f);
        GL11.glBegin(2);
        int ii = 0;
        while (ii < num_segments) {
            GL11.glVertex2f(x + cx, y + cy);
            float t = x;
            x = p * x - s * y;
            y = s * t + p * y;
            ii++;
        }
        GL11.glEnd();
        GL11.glScalef(2.0F, 2.0F, 2.0F);
        disableGL2D();
        GlStateManager.color(1, 1, 1, 1);
        GL11.glPopMatrix();
    }
	
	public static void enableGL2D() {
        GL11.glDisable(2929);
        GL11.glEnable(3042);
        GL11.glDisable(3553);
        GL11.glBlendFunc(770, 771);
        GL11.glDepthMask(true);
        GL11.glEnable(2848);
        GL11.glHint(3154, 4354);
        GL11.glHint(3155, 4354);
    }

    public static void disableGL2D() {
        GL11.glEnable(3553);
        GL11.glDisable(3042);
        GL11.glEnable(2929);
        GL11.glDisable(2848);
        GL11.glHint(3154, 4352);
        GL11.glHint(3155, 4352);
    }
	
	public static void drawFilledCircle(final int xx, final int yy, final float radius, final int sections,final Color color) {
        double dAngle = 2 * Math.PI / sections;
        float x, y;

        glPushAttrib(GL_ENABLE_BIT);

        glEnable(GL_BLEND);
        glDisable(GL_TEXTURE_2D);
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        glEnable(GL_LINE_SMOOTH);
        glBegin(GL_TRIANGLE_FAN);

        for (int i = 0; i < sections; i++) {
            x = (float) (radius * Math.sin((i * dAngle)));
            y = (float) (radius * Math.cos((i * dAngle)));

            glColor4f(color.getRed() / 255F, color.getGreen() / 255F, color.getBlue() / 255F, color.getAlpha() / 255F);
            glVertex2f(xx + x, yy + y);
        }

        glColor4f(1.0f, 1.0f, 1.0f, 1.0f);

        glEnd();

        glPopAttrib();
    }
	
	public static void drawRect(double left, double top, double right, double bottom, int color)
    {
        double var5;

        if (left < right)
        {
            var5 = left;
            left = right;
            right = var5;
        }

        if (top < bottom)
        {
            var5 = top;
            top = bottom;
            bottom = var5;
        }

        float var11 = (float)(color >> 24 & 255) / 255.0F;
        float var6 = (float)(color >> 16 & 255) / 255.0F;
        float var7 = (float)(color >> 8 & 255) / 255.0F;
        float var8 = (float)(color & 255) / 255.0F;
        Tessellator var9 = Tessellator.getInstance();
        WorldRenderer var10 = var9.getWorldRenderer();
        GlStateManager.enableBlend();
        GlStateManager.func_179090_x();
        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
        GlStateManager.color(var6, var7, var8, var11);
        var10.startDrawingQuads();
        var10.addVertex((double)left, (double)bottom, 0.0D);
        var10.addVertex((double)right, (double)bottom, 0.0D);
        var10.addVertex((double)right, (double)top, 0.0D);
        var10.addVertex((double)left, (double)top, 0.0D);
        var9.draw();
        GlStateManager.func_179098_w();
        GlStateManager.disableBlend();
    }
	
	 public static void drawRoundedRect(float left, float top, float right, float bottom, int smooth,Color color){
	        drawRect(left + smooth, top, right - smooth, bottom, color.getRGB());
	        drawRect(left, top + smooth, right, bottom - smooth, color.getRGB());
	        drawFilledCircle((int)left + smooth, (int)top + smooth, smooth, color);
	        drawFilledCircle((int)right - smooth, (int)top + smooth, smooth, color);
	        drawFilledCircle((int)right - smooth, (int)bottom - smooth, smooth, color);
	        drawFilledCircle((int)left + smooth, (int)bottom - smooth, smooth, color);

	 }
	 
	 public static void drawFilledCircle(final int xx, final int yy, final float radius, final Color color) {
	        int sections = 50;
	        double dAngle = 2 * Math.PI / sections;
	        float x, y;

	        glPushAttrib(GL_ENABLE_BIT);

	        glEnable(GL_BLEND);
	        glDisable(GL_TEXTURE_2D);
	        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	        glEnable(GL_LINE_SMOOTH);
	        glBegin(GL_TRIANGLE_FAN);

	        for (int i = 0; i < sections; i++) {
	            x = (float) (radius * Math.sin((i * dAngle)));
	            y = (float) (radius * Math.cos((i * dAngle)));

	            glColor4f(color.getRed() / 255F, color.getGreen() / 255F, color.getBlue() / 255F, color.getAlpha() / 255F);
	            glVertex2f(xx + x, yy + y);
	        }

	        glColor4f(1.0f, 1.0f, 1.0f, 1.0f);

	        glEnd();

	        glPopAttrib();
	    }
	
	public static List<HUDElement> getElementsInCategory(HUDElementCategory category) {
		List<HUDElement> el = Lists.newArrayList();
		for(HUDElement element : Main.main.hud.getElements()) {
			if(element.category == category) {
				el.add(element);
			}
		}
		return el;
	}
	
	public static String formatCategoryName(HUDElementCategory category) {
		String firstLetter = ("" + category.name().charAt(0)).toUpperCase();
		String others = ("" + category.name().substring(1)).toLowerCase();
		return firstLetter + others;
	}
	
	public static FontRenderer getFontRenderer() {
		return mc.fontRendererObj;
	}
	
	public static void drawRectWH(int x, int y, int width, int height, int color) {
		Gui.drawRect(x, y, x + width, y + height, color);
	}
	
	public static void drawRectWH(int x, int y, int width, int height, Color color) {
		Gui.drawRect(x, y, x + width, y + height, color.getRGB());
	}
}
