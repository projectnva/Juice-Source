package me.aycy.blockoverlay.visual;

import java.awt.Color;
import java.util.ArrayList;
import me.aycy.blockoverlay.BlockOverlay;
import me.aycy.blockoverlay.util.BlockOverlayMode;
import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.init.Blocks;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.MovingObjectPosition.MovingObjectType;
import net.minecraftforge.client.event.DrawBlockHighlightEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.lwjgl.opengl.GL11;

public class BlockOverlayRender {

    private BlockOverlay mod;
    private float red;
    private float green;
    private float blue;
    private float alpha;
    private float lineWidth;
    private int chromaSpeed;

    public BlockOverlayRender(BlockOverlay mod) {
        this.mod = mod;
        this.chromaSpeed = 1;
        this.lineWidth = 2.0F;
    }

    public float getWidth() {
        return this.lineWidth;
    }

    public void setWidth(float newVal) {
        this.lineWidth = newVal;
    }

    public int getChromaSpeed() {
        return this.chromaSpeed;
    }

    public void setChromaSpeed(int chromaSpeed) {
        this.chromaSpeed = chromaSpeed;
    }

    public ArrayList getRGBAValues() {
        ArrayList result = new ArrayList();

        result.add(Float.valueOf(this.red));
        result.add(Float.valueOf(this.green));
        result.add(Float.valueOf(this.blue));
        result.add(Float.valueOf(this.alpha));
        return result;
    }

    public String getColor() {
        String color = "";

        color = color + Float.toString(this.red) + "\r\n";
        color = color + Float.toString(this.green) + "\r\n";
        color = color + Float.toString(this.blue) + "\r\n";
        color = color + Float.toString(this.alpha);
        return color;
    }

    public void setColor(float red, float green, float blue, float alpha) {
        this.red = red;
        this.green = green;
        this.blue = blue;
        this.alpha = alpha;
    }

    @SubscribeEvent
    public void onDrawBlockHighlight(DrawBlockHighlightEvent event) {
        MovingObjectPosition mops = event.target;

        if (event.target != null && mops.typeOfHit == MovingObjectType.BLOCK && this.mod.getMode() != BlockOverlayMode.DEFAULT) {
            event.setCanceled(true);
            if (this.mod.getMode() != BlockOverlayMode.NONE) {
                if (Minecraft.getMinecraft().thePlayer.worldObj.getBlockState(event.target.getBlockPos()).getBlock() != null) {
                    Block block = Minecraft.getMinecraft().thePlayer.worldObj.getBlockState(event.target.getBlockPos()).getBlock();

                    if (block != Blocks.air && block != Blocks.water && block != Blocks.flowing_water && block != Blocks.lava && block != Blocks.flowing_lava) {
                        double x = (double) event.target.getBlockPos().getX() - Minecraft.getMinecraft().getRenderManager().viewerPosX;
                        double y = (double) event.target.getBlockPos().getY() - Minecraft.getMinecraft().getRenderManager().viewerPosY;
                        double z = (double) event.target.getBlockPos().getZ() - Minecraft.getMinecraft().getRenderManager().viewerPosZ;

                        GlStateManager.pushMatrix();
                        GlStateManager.depthMask(false);
                        GlStateManager.enableBlend();
                        GlStateManager.disableTexture2D();
                        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
                        GL11.glLineWidth(this.lineWidth);
                        if (this.mod.getChroma()) {
                            double box = (double) ((float) (System.currentTimeMillis() % (10000L / (long) this.chromaSpeed)) / (10000.0F / (float) this.chromaSpeed));
                            Color c = Color.getHSBColor((float) box, 0.8F, 0.8F);
                            float r = (float) c.getRed() / 255.0F;
                            float g = (float) c.getGreen() / 255.0F;
                            float b = (float) c.getBlue() / 255.0F;

                            this.red = r;
                            this.blue = b;
                            this.green = g;
                            this.alpha = this.mod.getMode() == BlockOverlayMode.FULL ? 0.12F : 1.0F;
                        }

                        if (this.mod.getMode() == BlockOverlayMode.OUTLINE) {
                            GlStateManager.color(this.red, this.green, this.blue, this.alpha);
                        } else {
                            GlStateManager.color(this.red, this.green, this.blue, 1.0F);
                        }

                        AxisAlignedBB box1 = new AxisAlignedBB(x - 0.001D, y - 0.001D, z - 0.001D, x + 1.001D, y + 1.001D, z + 1.001D);

                        RenderGlobal.drawSelectionBoundingBox(box1);
                        if (this.mod.getMode() == BlockOverlayMode.FULL) {
                            this.drawFilledBoundingBox(box1, this.red, this.green, this.blue, this.alpha);
                        }

                        GlStateManager.disableBlend();
                        GlStateManager.enableTexture2D();
                        GlStateManager.depthMask(true);
                        GlStateManager.popMatrix();
                    }
                }
            }
        }
    }

    private void drawFilledBoundingBox(AxisAlignedBB box, float red, float green, float blue, float alpha) {
        Tessellator tessellator = Tessellator.getInstance();
        WorldRenderer worldRenderer = tessellator.getWorldRenderer();

        worldRenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        worldRenderer.pos(box.minX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        tessellator.draw();
        worldRenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        worldRenderer.pos(box.maxX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        tessellator.draw();
        worldRenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        worldRenderer.pos(box.minX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        tessellator.draw();
        worldRenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        worldRenderer.pos(box.minX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        tessellator.draw();
        worldRenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        worldRenderer.pos(box.minX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        tessellator.draw();
        worldRenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        worldRenderer.pos(box.minX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.minX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.minZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.maxY, box.maxZ).color(red, green, blue, alpha).endVertex();
        worldRenderer.pos(box.maxX, box.minY, box.maxZ).color(red, green, blue, alpha).endVertex();
        tessellator.draw();
    }
}
