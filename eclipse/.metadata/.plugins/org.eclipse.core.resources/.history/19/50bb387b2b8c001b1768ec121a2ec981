package com.github.lunatrius.schematica.client.renderer.chunk.container;

import com.github.lunatrius.schematica.client.renderer.chunk.overlay.RenderOverlay;
import com.github.lunatrius.schematica.client.renderer.chunk.overlay.RenderOverlayList;
import java.util.Iterator;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.chunk.ListedRenderChunk;
import net.minecraft.client.renderer.chunk.RenderChunk;
import net.minecraft.util.EnumWorldBlockLayer;
import org.lwjgl.opengl.GL11;

public class SchematicChunkRenderContainerList extends SchematicChunkRenderContainer {

    public void renderChunkLayer(EnumWorldBlockLayer layer) {
        if (this.initialized) {
            Iterator iterator = this.renderChunks.iterator();

            while (iterator.hasNext()) {
                RenderChunk renderchunk = (RenderChunk) iterator.next();
                ListedRenderChunk listedRenderChunk = (ListedRenderChunk) renderchunk;

                GlStateManager.pushMatrix();
                this.preRenderChunk(renderchunk);
                GL11.glCallList(listedRenderChunk.getDisplayList(layer, listedRenderChunk.getCompiledChunk()));
                GlStateManager.popMatrix();
            }

            GlStateManager.resetColor();
            this.renderChunks.clear();
        }

    }

    public void renderOverlay() {
        if (this.initialized) {
            Iterator iterator = this.renderOverlays.iterator();

            while (iterator.hasNext()) {
                RenderOverlay renderOverlay = (RenderOverlay) iterator.next();
                RenderOverlayList renderOverlayList = (RenderOverlayList) renderOverlay;

                GlStateManager.pushMatrix();
                this.preRenderChunk(renderOverlay);
                GL11.glCallList(renderOverlayList.getDisplayList(EnumWorldBlockLayer.TRANSLUCENT, renderOverlayList.getCompiledChunk()));
                GlStateManager.popMatrix();
            }
        }

        GlStateManager.resetColor();
        this.renderOverlays.clear();
    }
}
