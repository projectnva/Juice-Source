package com.github.lunatrius.schematica.client.renderer.shader;

import com.github.lunatrius.schematica.reference.Reference;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.util.ResourceLocation;
import org.lwjgl.opengl.GL20;

public class ShaderProgram {

    private static final Minecraft MINECRAFT = Minecraft.getMinecraft();
    private int program;

    public ShaderProgram(String domain, String vertShaderFilename, String fragShaderFilename) {
        try {
            this.init(domain, vertShaderFilename, fragShaderFilename);
            if (this.program > 0) {
                GL20.glUseProgram(this.program);
                GL20.glUniform1i(GL20.glGetUniformLocation(this.program, "texture"), 0);
                GL20.glUseProgram(0);
            }
        } catch (Exception exception) {
            Reference.logger.error("Could not initialize shader program!", exception);
            this.program = 0;
        }

    }

    private void init(String domain, String vertShaderFilename, String fragShaderFilename) {
        if (!OpenGlHelper.shadersSupported) {
            this.program = 0;
        } else {
            this.program = GL20.glCreateProgram();
            int vertShader = this.loadAndCompileShader(domain, vertShaderFilename, 'è¬±');
            int fragShader = this.loadAndCompileShader(domain, fragShaderFilename, 'è¬°');

            if (vertShader != 0) {
                GL20.glAttachShader(this.program, vertShader);
            }

            if (fragShader != 0) {
                GL20.glAttachShader(this.program, fragShader);
            }

            GL20.glLinkProgram(this.program);
            if (GL20.glGetProgrami(this.program, 'è®‚') == 0) {
                Reference.logger.error("Could not link shader: {}", new Object[] { GL20.glGetProgramInfoLog(this.program, 1024)});
                GL20.glDeleteProgram(this.program);
                this.program = 0;
            } else {
                GL20.glValidateProgram(this.program);
                if (GL20.glGetProgrami(this.program, 'è®ƒ') == 0) {
                    Reference.logger.error("Could not validate shader: {}", new Object[] { GL20.glGetProgramInfoLog(this.program, 1024)});
                    GL20.glDeleteProgram(this.program);
                    this.program = 0;
                }

            }
        }
    }

    private int loadAndCompileShader(String domain, String filename, int shaderType) {
        if (filename == null) {
            return 0;
        } else {
            int handle = GL20.glCreateShader(shaderType);

            if (handle == 0) {
                Reference.logger.error("Could not create shader of type {} for {}: {}", new Object[] { Integer.valueOf(shaderType), filename, GL20.glGetProgramInfoLog(this.program, 1024)});
                return 0;
            } else {
                String code = this.loadFile(new ResourceLocation(domain, filename));

                if (code == null) {
                    GL20.glDeleteShader(handle);
                    return 0;
                } else {
                    GL20.glShaderSource(handle, code);
                    GL20.glCompileShader(handle);
                    if (GL20.glGetShaderi(handle, 'è®?') == 0) {
                        Reference.logger.error("Could not compile shader {}: {}", new Object[] { filename, GL20.glGetShaderInfoLog(this.program, 1024)});
                        GL20.glDeleteShader(handle);
                        return 0;
                    } else {
                        return handle;
                    }
                }
            }
        }
    }

    private String loadFile(ResourceLocation resourceLocation) {
        try {
            StringBuilder e = new StringBuilder();
            InputStream inputStream = ShaderProgram.MINECRAFT.getResourceManager().getResource(resourceLocation).getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

            String line;

            while ((line = reader.readLine()) != null) {
                e.append(line);
                e.append('\n');
            }

            reader.close();
            return e.toString();
        } catch (Exception exception) {
            Reference.logger.error("Could not load shader file!", exception);
            return null;
        }
    }

    public int getProgram() {
        return this.program;
    }
}
