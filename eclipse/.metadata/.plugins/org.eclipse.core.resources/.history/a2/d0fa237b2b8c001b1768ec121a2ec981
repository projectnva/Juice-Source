package com.github.lunatrius.schematica.util;

import com.github.lunatrius.schematica.client.util.BlockList;
import com.github.lunatrius.schematica.reference.Reference;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public enum ItemStackSortType {

    NAME_ASC("name", "↑", new Comparator() {
        public int compare(BlockList.WrappedItemStack wrappedItemStackA, BlockList.WrappedItemStack wrappedItemStackB) {
            String nameA = wrappedItemStackA.getItemStackDisplayName();
            String nameB = wrappedItemStackB.getItemStackDisplayName();

            return nameA.compareTo(nameB);
        }
    }), NAME_DESC("name", "↓", new Comparator() {
    public int compare(BlockList.WrappedItemStack wrappedItemStackA, BlockList.WrappedItemStack wrappedItemStackB) {
        String nameA = wrappedItemStackA.getItemStackDisplayName();
        String nameB = wrappedItemStackB.getItemStackDisplayName();

        return nameB.compareTo(nameA);
    }
}), SIZE_ASC("amount", "↑", new Comparator() {
    public int compare(BlockList.WrappedItemStack wrappedItemStackA, BlockList.WrappedItemStack wrappedItemStackB) {
        return wrappedItemStackA.total - wrappedItemStackB.total;
    }
}), SIZE_DESC("amount", "↓", new Comparator() {
    public int compare(BlockList.WrappedItemStack wrappedItemStackA, BlockList.WrappedItemStack wrappedItemStackB) {
        return wrappedItemStackB.total - wrappedItemStackA.total;
    }
});

    private final Comparator comparator;
    public final String label;
    public final String glyph;

    private ItemStackSortType(String label, String glyph, Comparator comparator) {
        this.label = label;
        this.glyph = glyph;
        this.comparator = comparator;
    }

    public void sort(List blockList) {
        try {
            Collections.sort(blockList, this.comparator);
        } catch (Exception exception) {
            Reference.logger.error("Could not sort the block list!", exception);
        }

    }

    public ItemStackSortType next() {
        ItemStackSortType[] values = values();

        return values[(this.ordinal() + 1) % values.length];
    }

    public static ItemStackSortType fromString(String name) {
        try {
            return valueOf(name);
        } catch (Exception exception) {
            return ItemStackSortType.NAME_ASC;
        }
    }
}
