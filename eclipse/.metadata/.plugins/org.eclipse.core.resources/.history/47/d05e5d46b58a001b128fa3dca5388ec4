package clientname.mods.impl;

import org.lwjgl.opengl.GL11;
import java.awt.Color;

import clientname.cosmetics.CosmeticController;
import clientname.gui.hud.ScreenPosition;
import clientname.mods.ModDraggable;
import clientname.module.modules.ArmorStatus;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;

public class ModArmorStatus extends ModDraggable {

	boolean isToggled = false;

	@Override
	public int getWidth() {
		return 64;
	}

	@Override
	public int getHeight() {
		return 80;
	}

	@Override
	public void render(ScreenPosition pos) { 
		
		renderItemStack(pos, 4,  mc.thePlayer.getCurrentEquippedItem());
		for(int i = 0; i < mc.thePlayer.inventory.armorInventory.length; i++) {
			ItemStack itemStack = mc.thePlayer.inventory.armorInventory[i];
			renderItemStack(pos, i, itemStack);
		}
		Gui.drawRect(pos.getAbsoluteX(), pos.getAbsoluteY(), pos.getAbsoluteX() + getWidth() + 1, pos.getAbsoluteY() + getHeight(), 0);
		}
	

	@Override
	public void renderDummy(ScreenPosition pos) {
		renderItemStack(pos, 0, new ItemStack(Items.diamond_sword));
		renderItemStack(pos, 4, new ItemStack(Items.diamond_helmet));
		renderItemStack(pos, 3, new ItemStack(Items.diamond_chestplate));
		renderItemStack(pos, 2, new ItemStack(Items.diamond_leggings));
		renderItemStack(pos, 1, new ItemStack(Items.diamond_boots));
	}
	
	private void renderItemStack(ScreenPosition pos, int i, ItemStack is) {
		if(is == null) {
			return;
		}
		
		GL11.glPushMatrix();
		int yAdd = (-16 * i) + 48 + 16;
		
		if(is.getItem().isDamageable()) {
			double damage = ((is.getMaxDamage() - is.getItemDamage()) / (double) is.getMaxDamage()) * 100;
			 if (damage < 25) {
               font.drawString(String.format("%.2f%%", damage), pos.getAbsoluteX() + 20, pos.getAbsoluteY() + yAdd + 5, 0xFFFF0000);
           }
           else if (damage < 50) {
               font.drawString(String.format("%.2f%%", damage), pos.getAbsoluteX() + 20, pos.getAbsoluteY() + yAdd + 5, 0xFFfb5800);
           }
           else if (damage < 60) {
        	   font.drawString(String.format("%.2f%%", damage), pos.getAbsoluteX() + 20, pos.getAbsoluteY() + yAdd + 5, 0xFFfb9800);
           }
           else if (damage < 70) {
        	   font.drawString(String.format("%.2f%%", damage), pos.getAbsoluteX() + 20, pos.getAbsoluteY() + yAdd + 5, 0xFFfbe400);
           }
           else if (damage < 80) {
        	   font.drawString(String.format("%.2f%%", damage), pos.getAbsoluteX() + 20, pos.getAbsoluteY() + yAdd + 5, 0xFFdffb00);
           }
           else if (damage < 90) {
        	   font.drawString(String.format("%.2f%%", damage), pos.getAbsoluteX() + 20, pos.getAbsoluteY() + yAdd + 5, 0xFF8ffb00);
           }
           else if (damage >= 100) {
        	   font.drawString(String.format("%.2f%%", damage), pos.getAbsoluteX() + 20, pos.getAbsoluteY() + yAdd + 5, 0xFF00FF00);
           }
           else {
               font.drawString(String.format("%.2f%%", damage), pos.getAbsoluteX() + 20, pos.getAbsoluteY() + yAdd + 5, -1);
           }
			
		}
		
		RenderHelper.enableGUIStandardItemLighting();
		mc.getRenderItem().renderItemAndEffectIntoGUI(is, pos.getAbsoluteX(), pos.getAbsoluteY() + yAdd);
		
		GL11.glPopMatrix();
		
	}
	
	static int DamageToColor(double percentage) {
	        if (percentage > 1) {
	            percentage = 1;
	        }
	        else if (percentage < 0) {
	            percentage = 0;
	        }
	        int red = (int)(255.0 * (1 - percentage));
	        int green = (int)(255.0 * (percentage));
	        int blue = 0;
	        return new Color(red, green, blue).getRGB();
	 }

	public static boolean isToggled() {
		return true;
	}

}
