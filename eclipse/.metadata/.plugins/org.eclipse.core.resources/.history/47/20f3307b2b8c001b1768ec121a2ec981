package com.github.lunatrius.schematica.command;

import com.github.lunatrius.core.util.FileUtils;
import com.github.lunatrius.schematica.Schematica;
import com.github.lunatrius.schematica.reference.Reference;
import com.github.lunatrius.schematica.util.FileFilterSchematic;
import java.io.File;
import java.util.Iterator;
import java.util.LinkedList;
import net.minecraft.command.CommandException;
import net.minecraft.command.ICommandSender;
import net.minecraft.command.WrongUsageException;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.event.ClickEvent;
import net.minecraft.event.ClickEvent.Action;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.ChatComponentTranslation;
import net.minecraft.util.ChatStyle;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.IChatComponent;
import org.apache.commons.io.FilenameUtils;

public class CommandSchematicaList extends CommandSchematicaBase {

    private static final FileFilterSchematic FILE_FILTER_SCHEMATIC = new FileFilterSchematic(false);

    public String getCommandName() {
        return "schematicaList";
    }

    public String getCommandUsage(ICommandSender sender) {
        return "schematica.command.list.usage";
    }

    public void processCommand(ICommandSender sender, String[] arguments) throws CommandException {
        if (!(sender instanceof EntityPlayer)) {
            throw new CommandException("schematica.command.save.playersOnly", new Object[0]);
        } else {
            int page = 0;

            try {
                if (arguments.length > 0) {
                    page = Integer.parseInt(arguments[0]) - 1;
                    if (page < 0) {
                        page = 0;
                    }
                }
            } catch (NumberFormatException numberformatexception) {
                throw new WrongUsageException(this.getCommandUsage(sender), new Object[0]);
            }

            EntityPlayer player = (EntityPlayer) sender;
            boolean pageSize = true;
            int pageStart = page * 9;
            int pageEnd = pageStart + 9;
            int currentFile = 0;
            LinkedList componentsToSend = new LinkedList();
            File schematicDirectory = Schematica.proxy.getPlayerSchematicDirectory(player, true);

            if (schematicDirectory == null) {
                Reference.logger.warn("Unable to determine the schematic directory for player {}", new Object[] { player});
                throw new CommandException("schematica.command.save.playerSchematicDirUnavailable", new Object[0]);
            } else if (!schematicDirectory.exists() && !schematicDirectory.mkdirs()) {
                Reference.logger.warn("Could not create player schematic directory {}", new Object[] { schematicDirectory.getAbsolutePath()});
                throw new CommandException("schematica.command.save.playerSchematicDirUnavailable", new Object[0]);
            } else {
                File[] files = schematicDirectory.listFiles(CommandSchematicaList.FILE_FILTER_SCHEMATIC);
                File[] totalPages = files;
                int i = files.length;

                for (int chatComponent = 0; chatComponent < i; ++chatComponent) {
                    File path = totalPages[chatComponent];

                    if (currentFile >= pageStart && currentFile < pageEnd) {
                        String fileName = FilenameUtils.removeExtension(path.getName());
                        ChatComponentText chatComponent1 = new ChatComponentText(String.format("%2d (%s): %s [", new Object[] { Integer.valueOf(currentFile + 1), FileUtils.humanReadableByteCount(path.length()), fileName}));
                        String removeCommand = String.format("/%s %s", new Object[] { "schematicaRemove", fileName});
                        IChatComponent removeLink = (new ChatComponentTranslation("schematica.command.list.remove", new Object[0])).setChatStyle((new ChatStyle()).setChatClickEvent(new ClickEvent(Action.RUN_COMMAND, removeCommand)).setColor(EnumChatFormatting.RED));

                        chatComponent1.appendSibling(removeLink);
                        chatComponent1.appendText("][");
                        String downloadCommand = String.format("/%s %s", new Object[] { "schematicaDownload", fileName});
                        IChatComponent downloadLink = (new ChatComponentTranslation("schematica.command.list.download", new Object[0])).setChatStyle((new ChatStyle()).setChatClickEvent(new ClickEvent(Action.RUN_COMMAND, downloadCommand)).setColor(EnumChatFormatting.GREEN));

                        chatComponent1.appendSibling(downloadLink);
                        chatComponent1.appendText("]");
                        componentsToSend.add(chatComponent1);
                    }

                    ++currentFile;
                }

                if (currentFile == 0) {
                    sender.addChatMessage(new ChatComponentTranslation("schematica.command.list.noSchematics", new Object[0]));
                } else {
                    int j = (currentFile - 1) / 9;

                    if (page > j) {
                        throw new CommandException("schematica.command.list.noSuchPage", new Object[0]);
                    } else {
                        sender.addChatMessage((new ChatComponentTranslation("schematica.command.list.header", new Object[] { Integer.valueOf(page + 1), Integer.valueOf(j + 1)})).setChatStyle((new ChatStyle()).setColor(EnumChatFormatting.DARK_GREEN)));
                        Iterator iterator = componentsToSend.iterator();

                        while (iterator.hasNext()) {
                            IChatComponent ichatcomponent = (IChatComponent) iterator.next();

                            sender.addChatMessage(ichatcomponent);
                        }

                    }
                }
            }
        }
    }
}
