package me.aycy.blockoverlay;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import clientname.event.impl.ClientTickEvent;
import me.aycy.blockoverlay.util.BlockOverlayMode;
import me.aycy.blockoverlay.visual.BlockOverlayRender;
import me.aycy.blockoverlay.visual.ColorGui;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiScreen;

public class BlockOverlay {

    private boolean openGui = false;
    private boolean openColorGui;
    private boolean chroma;
    private BlockOverlayMode mode;
    private BlockOverlayRender render;
    private GuiScreen gui;

    public BlockOverlay() {
        this.mode = BlockOverlayMode.DEFAULT;
    }

    public GuiScreen getGui() {
        return this.gui;
    }

    public void setGui(GuiScreen gui) {
        this.gui = gui;
    }

    public BlockOverlayMode getMode() {
        return this.mode;
    }

    public void setMode(BlockOverlayMode mode) {
        this.mode = mode;
    }

    public BlockOverlayRender getRender() {
        return this.render;
    }

    public boolean getOpenGui() {
        return this.openGui;
    }

    public void setOpenGui(boolean openGui) {
        this.openGui = openGui;
    }

    public void openColorGui() {
        this.openColorGui = true;
    }

    public boolean getChroma() {
        return this.chroma;
    }

    public void switchChroma() {
        this.chroma = !this.chroma;
    }

    public void onTick(ClientTickEvent e) {
        if (this.openGui) {
            Minecraft.getMinecraft().displayGuiScreen(this.gui);
            this.openGui = false;
        }

        if (this.openColorGui) {
            Minecraft.getMinecraft().displayGuiScreen(new ColorGui(this, this.getRender()));
            this.openColorGui = false;
        }

    }

    public void loadConfig() {
        try {
            File e = new File(Minecraft.getMinecraft().mcDataDir, "config");
            File file = new File(e + File.separator + "blockOverlay.cfg");

            if (!file.exists()) {
                return;
            }

            BufferedReader reader = new BufferedReader(new FileReader(file));
            int i = 0;

            String line;

            while ((line = reader.readLine()) != null) {
                ++i;
                switch (i) {
                case 2:
                    this.mode = BlockOverlayMode.valueOf(line.toUpperCase());

                case 3:
                case 4:
                case 9:
                case 10:
                case 13:
                case 14:
                default:
                    break;

                case 5:
                    this.render.setColor(Float.parseFloat(line), ((Float) this.render.getRGBAValues().get(1)).floatValue(), ((Float) this.render.getRGBAValues().get(2)).floatValue(), ((Float) this.render.getRGBAValues().get(3)).floatValue());
                    break;

                case 6:
                    this.render.setColor(((Float) this.render.getRGBAValues().get(0)).floatValue(), Float.parseFloat(line), ((Float) this.render.getRGBAValues().get(2)).floatValue(), ((Float) this.render.getRGBAValues().get(3)).floatValue());
                    break;

                case 7:
                    this.render.setColor(((Float) this.render.getRGBAValues().get(0)).floatValue(), ((Float) this.render.getRGBAValues().get(1)).floatValue(), Float.parseFloat(line), ((Float) this.render.getRGBAValues().get(3)).floatValue());
                    break;

                case 8:
                    this.render.setColor(((Float) this.render.getRGBAValues().get(0)).floatValue(), ((Float) this.render.getRGBAValues().get(1)).floatValue(), ((Float) this.render.getRGBAValues().get(2)).floatValue(), Float.parseFloat(line));
                    break;

                case 11:
                    this.chroma = Boolean.parseBoolean(line);
                    break;

                case 12:
                    this.render.setChromaSpeed(Integer.parseInt(line));
                    break;

                case 15:
                    this.render.setWidth(Float.parseFloat(line));
                }
            }

            reader.close();
        } catch (Throwable throwable) {
            throwable.printStackTrace();
        }

    }

    public void saveConfig() {
        try {
            File parentFile = new File(Minecraft.getMinecraft().mcDataDir, "config");
            File file = new File(parentFile + File.separator + "blockOverlay.cfg");

            if (!file.exists()) {
                file.getParentFile().mkdir();
                file.createNewFile();
            }

            BufferedWriter writer = new BufferedWriter(new FileWriter(file));

            writer.write("Mode: \n" + this.mode.getName() + "\n\nColor (RGBA): \n" + this.render.getColor() + "\n\nChroma: \n" + this.chroma + "\n" + this.render.getChromaSpeed() + "\n\nLine Width\n" + this.render.getWidth());
            writer.close();
        } catch (IOException ioexception) {
            ;
        }

    }
}
