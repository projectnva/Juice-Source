package com.github.lunatrius.core.version;

import com.github.lunatrius.core.reference.Reference;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.Map;
import net.minecraftforge.common.ForgeVersion;
import net.minecraftforge.common.ForgeVersion.CheckResult;
import net.minecraftforge.common.ForgeVersion.Status;
import net.minecraftforge.fml.common.ModContainer;
import net.minecraftforge.fml.common.versioning.ComparableVersion;

public class ForgeVersionCheck {

    public static Status getStatus(ComparableVersion versionRemote, ComparableVersion versionLocal) {
        int diff = versionRemote.compareTo(versionLocal);

        return diff == 0 ? Status.UP_TO_DATE : (diff > 0 ? Status.OUTDATED : Status.AHEAD);
    }

    public static void notify(ModContainer container, Status status, ComparableVersion target, Map changes, String url) {
        try {
            Map t = getVersionMap();
            CheckResult checkResult = getCheckResult(status, target, changes, url);

            if (t != null && checkResult != null) {
                t.put(container, checkResult);
            }
        } catch (Throwable throwable) {
            Reference.logger.error("Failed to notify Forge!", throwable);
        }

    }

    private static Map getVersionMap() throws ReflectiveOperationException {
        try {
            Field t = ForgeVersion.class.getDeclaredField("results");

            t.setAccessible(true);
            return (Map) t.get((Object) null);
        } catch (Throwable throwable) {
            Reference.logger.error("Failed to get the version map!", throwable);
            return null;
        }
    }

    private static CheckResult getCheckResult(Status status, ComparableVersion target, Map changes, String url) throws ReflectiveOperationException {
        try {
            Constructor t = CheckResult.class.getDeclaredConstructor(new Class[] { Status.class, ComparableVersion.class, Map.class, String.class});

            t.setAccessible(true);
            return (CheckResult) t.newInstance(new Object[] { status, target, changes, url});
        } catch (Throwable throwable) {
            Reference.logger.error("Failed to construct the CheckResult object!", throwable);
            return null;
        }
    }
}
