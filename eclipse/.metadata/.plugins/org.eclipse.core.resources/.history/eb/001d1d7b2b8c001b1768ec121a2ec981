package com.github.lunatrius.schematica.world.schematic;

import com.github.lunatrius.schematica.reference.Reference;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.CompressedStreamTools;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fml.common.registry.FMLControlledNamespacedRegistry;
import net.minecraftforge.fml.common.registry.GameData;

public final class SchematicUtil {

    public static final ItemStack DEFAULT_ICON = new ItemStack(Blocks.grass);
    public static final FMLControlledNamespacedRegistry BLOCK_REGISTRY = GameData.getBlockRegistry();
    public static final FMLControlledNamespacedRegistry ITEM_REGISTRY = GameData.getItemRegistry();

    public static NBTTagCompound readTagCompoundFromFile(File file) throws IOException {
        try {
            return CompressedStreamTools.readCompressed(new FileInputStream(file));
        } catch (Exception exception) {
            Reference.logger.warn("Failed compressed read, trying normal read...", exception);
            return CompressedStreamTools.read(file);
        }
    }

    public static ItemStack getIconFromName(String iconName) {
        ResourceLocation rl = null;
        int damage = 0;
        String[] parts = iconName.split(",");

        if (parts.length >= 1) {
            rl = new ResourceLocation(parts[0]);
            if (parts.length >= 2) {
                try {
                    damage = Integer.parseInt(parts[1]);
                } catch (NumberFormatException numberformatexception) {
                    ;
                }
            }
        }

        if (rl == null) {
            return SchematicUtil.DEFAULT_ICON.copy();
        } else {
            ItemStack block = new ItemStack((Block) SchematicUtil.BLOCK_REGISTRY.getObject(rl), 1, damage);

            if (block.getItem() != null) {
                return block;
            } else {
                ItemStack item = new ItemStack((Item) SchematicUtil.ITEM_REGISTRY.getObject(rl), 1, damage);

                return item.getItem() != null ? item : SchematicUtil.DEFAULT_ICON.copy();
            }
        }
    }

    public static ItemStack getIconFromNBT(NBTTagCompound tagCompound) {
        ItemStack icon = SchematicUtil.DEFAULT_ICON.copy();

        if (tagCompound != null && tagCompound.hasKey("Icon")) {
            icon.readFromNBT(tagCompound.getCompoundTag("Icon"));
            if (icon.getItem() == null) {
                icon = SchematicUtil.DEFAULT_ICON.copy();
            }
        }

        return icon;
    }

    public static ItemStack getIconFromFile(File file) {
        try {
            return getIconFromNBT(readTagCompoundFromFile(file));
        } catch (Exception exception) {
            Reference.logger.error("Failed to read schematic icon!", exception);
            return SchematicUtil.DEFAULT_ICON.copy();
        }
    }
}
