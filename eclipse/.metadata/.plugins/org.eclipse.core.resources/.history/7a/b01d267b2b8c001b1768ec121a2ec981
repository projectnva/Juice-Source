package com.github.lunatrius.schematica.proxy;

import com.github.lunatrius.schematica.command.CommandSchematicaDownload;
import com.github.lunatrius.schematica.handler.ConfigurationHandler;
import com.github.lunatrius.schematica.handler.PlayerHandler;
import com.github.lunatrius.schematica.reference.Reference;
import java.io.File;
import java.io.IOException;
import java.util.UUID;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.server.MinecraftServer;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;

public class ServerProxy extends CommonProxy {

    public void init(FMLInitializationEvent event) {
        super.init(event);
        MinecraftForge.EVENT_BUS.register(PlayerHandler.INSTANCE);
    }

    public void serverStarting(FMLServerStartingEvent event) {
        super.serverStarting(event);
        event.registerServerCommand(new CommandSchematicaDownload());
    }

    public File getDataDirectory() {
        File file = MinecraftServer.getServer().getFile(".");

        try {
            return file.getCanonicalFile();
        } catch (IOException ioexception) {
            Reference.logger.info("Could not canonize path!", ioexception);
            return file;
        }
    }

    public boolean loadSchematic(EntityPlayer player, File directory, String filename) {
        return false;
    }

    public boolean reloadSchematic() {
        return false;
    }

    public boolean isPlayerQuotaExceeded(EntityPlayer player) {
        byte spaceUsed = 0;
        File schematicDirectory = this.getPlayerSchematicDirectory(player, true);
        int spaceUsed1 = spaceUsed + this.getSpaceUsedByDirectory(schematicDirectory);

        schematicDirectory = this.getPlayerSchematicDirectory(player, false);
        spaceUsed1 += this.getSpaceUsedByDirectory(schematicDirectory);
        return spaceUsed1 / 1024 > ConfigurationHandler.playerQuotaKilobytes;
    }

    private int getSpaceUsedByDirectory(File directory) {
        int spaceUsed = 0;

        if (directory != null && directory.exists()) {
            File[] files = directory.listFiles();

            if (files == null) {
                files = new File[0];
            }

            File[] afile = files;
            int i = files.length;

            for (int j = 0; j < i; ++j) {
                File path = afile[j];

                spaceUsed = (int) ((long) spaceUsed + path.length());
            }

            return spaceUsed;
        } else {
            return 0;
        }
    }

    public File getPlayerSchematicDirectory(EntityPlayer player, boolean privateDirectory) {
        UUID playerId = player.getUniqueID();

        if (playerId == null) {
            Reference.logger.warn("Unable to identify player {}", new Object[] { player.toString()});
            return null;
        } else {
            File playerDir = new File(ConfigurationHandler.schematicDirectory.getAbsolutePath(), playerId.toString());

            return privateDirectory ? new File(playerDir, "private") : new File(playerDir, "public");
        }
    }
}
