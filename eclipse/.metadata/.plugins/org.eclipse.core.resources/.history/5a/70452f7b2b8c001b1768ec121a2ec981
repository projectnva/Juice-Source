package com.github.lunatrius.schematica.command;

import com.github.lunatrius.core.util.FileUtils;
import com.github.lunatrius.schematica.Schematica;
import com.github.lunatrius.schematica.api.ISchematic;
import com.github.lunatrius.schematica.handler.DownloadHandler;
import com.github.lunatrius.schematica.network.transfer.SchematicTransfer;
import com.github.lunatrius.schematica.reference.Reference;
import com.github.lunatrius.schematica.util.FileFilterSchematic;
import com.github.lunatrius.schematica.world.schematic.SchematicFormat;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import net.minecraft.command.CommandException;
import net.minecraft.command.ICommandSender;
import net.minecraft.command.WrongUsageException;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.util.BlockPos;
import net.minecraft.util.ChatComponentTranslation;
import org.apache.commons.io.FilenameUtils;

public class CommandSchematicaDownload extends CommandSchematicaBase {

    private static final FileFilterSchematic FILE_FILTER_SCHEMATIC = new FileFilterSchematic(false);

    public String getCommandName() {
        return "schematicaDownload";
    }

    public String getCommandUsage(ICommandSender sender) {
        return "schematica.command.download.usage";
    }

    public List addTabCompletionOptions(ICommandSender sender, String[] args, BlockPos pos) {
        if (!(sender instanceof EntityPlayer)) {
            return null;
        } else {
            File directory = Schematica.proxy.getPlayerSchematicDirectory((EntityPlayer) sender, true);
            File[] files = directory.listFiles(CommandSchematicaDownload.FILE_FILTER_SCHEMATIC);

            if (files == null) {
                return null;
            } else {
                ArrayList filenames = new ArrayList();
                File[] afile = files;
                int i = files.length;

                for (int j = 0; j < i; ++j) {
                    File file = afile[j];

                    filenames.add(FilenameUtils.removeExtension(file.getName()));
                }

                return getListOfStringsMatchingLastWord(args, filenames);
            }
        }
    }

    public void processCommand(ICommandSender sender, String[] args) throws CommandException {
        if (args.length < 1) {
            throw new WrongUsageException(this.getCommandUsage(sender), new Object[0]);
        } else if (!(sender instanceof EntityPlayerMP)) {
            throw new CommandException("schematica.command.save.playersOnly", new Object[0]);
        } else {
            String filename = args[0] + ".schematic";
            EntityPlayerMP player = (EntityPlayerMP) sender;
            File directory = Schematica.proxy.getPlayerSchematicDirectory(player, true);

            if (!FileUtils.contains(directory, filename)) {
                Reference.logger.error("{} has tried to download the file {}", new Object[] { player.getName(), filename});
                throw new CommandException("schematica.command.download.downloadFail", new Object[0]);
            } else {
                ISchematic schematic = SchematicFormat.readFromFile(directory, filename);

                if (schematic != null) {
                    DownloadHandler.INSTANCE.transferMap.put(player, new SchematicTransfer(schematic, filename));
                    sender.addChatMessage(new ChatComponentTranslation("schematica.command.download.started", new Object[] { filename}));
                } else {
                    throw new CommandException("schematica.command.download.downloadFail", new Object[0]);
                }
            }
        }
    }
}
