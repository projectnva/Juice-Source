package com.github.lunatrius.schematica.client.renderer.chunk.container;

import com.github.lunatrius.schematica.client.renderer.chunk.overlay.RenderOverlay;
import java.util.Iterator;
import java.util.List;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.chunk.RenderChunk;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.client.renderer.vertex.VertexBuffer;
import net.minecraft.client.renderer.vertex.VertexFormatElement;
import net.minecraft.client.renderer.vertex.VertexFormatElement.EnumUsage;
import net.minecraft.util.EnumWorldBlockLayer;
import org.lwjgl.opengl.GL11;

public class SchematicChunkRenderContainerVbo extends SchematicChunkRenderContainer {

    public void renderChunkLayer(EnumWorldBlockLayer layer) {
        this.preRenderChunk();
        if (this.initialized) {
            Iterator iterator = this.renderChunks.iterator();

            while (iterator.hasNext()) {
                RenderChunk renderChunk = (RenderChunk) iterator.next();
                VertexBuffer vertexbuffer = renderChunk.getVertexBufferByLayer(layer.ordinal());

                GlStateManager.pushMatrix();
                this.preRenderChunk(renderChunk);
                renderChunk.multModelviewMatrix();
                vertexbuffer.bindBuffer();
                this.setupArrayPointers();
                vertexbuffer.drawArrays(7);
                GlStateManager.popMatrix();
            }

            OpenGlHelper.glBindBuffer(OpenGlHelper.GL_ARRAY_BUFFER, 0);
            GlStateManager.resetColor();
            this.renderChunks.clear();
        }

        this.postRenderChunk();
    }

    private void preRenderChunk() {
        GL11.glEnableClientState('è?´');
        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
        GL11.glEnableClientState('è?¸');
        OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
        GL11.glEnableClientState('è?¸');
        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
        GL11.glEnableClientState('è?¶');
    }

    private void postRenderChunk() {
        List elements = DefaultVertexFormats.BLOCK.getElements();
        Iterator iterator = elements.iterator();

        while (iterator.hasNext()) {
            VertexFormatElement element = (VertexFormatElement) iterator.next();
            EnumUsage usage = element.getUsage();
            int index = element.getIndex();

            switch (usage) {
            case POSITION:
                GL11.glDisableClientState('è?´');
                break;

            case UV:
                OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit + index);
                GL11.glDisableClientState('è?¸');
                OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
                break;

            case COLOR:
                GL11.glDisableClientState('è?¶');
                GlStateManager.resetColor();
            }
        }

    }

    private void setupArrayPointers() {
        GL11.glVertexPointer(3, 5126, 28, 0L);
        GL11.glColorPointer(4, 5121, 28, 12L);
        GL11.glTexCoordPointer(2, 5126, 28, 16L);
        OpenGlHelper.setClientActiveTexture(OpenGlHelper.lightmapTexUnit);
        GL11.glTexCoordPointer(2, 5122, 28, 24L);
        OpenGlHelper.setClientActiveTexture(OpenGlHelper.defaultTexUnit);
    }

    public void renderOverlay() {
        if (this.initialized) {
            this.preRenderOverlay();
            Iterator iterator = this.renderOverlays.iterator();

            while (iterator.hasNext()) {
                RenderOverlay renderOverlay = (RenderOverlay) iterator.next();
                VertexBuffer vertexBuffer = renderOverlay.getVertexBufferByLayer(EnumWorldBlockLayer.TRANSLUCENT.ordinal());

                GlStateManager.pushMatrix();
                this.preRenderChunk(renderOverlay);
                renderOverlay.multModelviewMatrix();
                vertexBuffer.bindBuffer();
                this.setupArrayPointersOverlay();
                vertexBuffer.drawArrays(7);
                GlStateManager.popMatrix();
            }

            OpenGlHelper.glBindBuffer(OpenGlHelper.GL_ARRAY_BUFFER, 0);
            GlStateManager.resetColor();
            this.renderOverlays.clear();
            this.postRenderOverlay();
        }

    }

    private void preRenderOverlay() {
        GL11.glEnableClientState('è?´');
        GL11.glEnableClientState('è?¶');
    }

    private void postRenderOverlay() {
        GL11.glDisableClientState('è?¶');
        GL11.glDisableClientState('è?´');
    }

    private void setupArrayPointersOverlay() {
        GL11.glVertexPointer(3, 5126, 16, 0L);
        GL11.glColorPointer(4, 5121, 16, 12L);
    }
}
